// <auto-generated />
using System;
using Dwapi.ExtractsManagement.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Dwapi.ExtractsManagement.Infrastructure.Migrations
{
    [DbContext(typeof(ExtractsContext))]
    [Migration("20190712151547_mysqlcolations")]
    partial class mysqlcolations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Cbs.MasterPatientIndex", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Birth_Certificate");

                    b.Property<string>("CCC_Number");

                    b.Property<string>("ContactAddress");

                    b.Property<string>("ContactName");

                    b.Property<string>("ContactPhoneNumber");

                    b.Property<string>("ContactRelation");

                    b.Property<DateTime?>("DOB");

                    b.Property<DateTime?>("DateConfirmedHIVPositive");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<string>("FacilityName");

                    b.Property<string>("FirstName");

                    b.Property<string>("FirstName_Normalized");

                    b.Property<string>("Gender");

                    b.Property<double?>("JaroWinklerScore");

                    b.Property<string>("LastName");

                    b.Property<string>("LastName_Normalized");

                    b.Property<string>("MaritalStatus");

                    b.Property<string>("MiddleName");

                    b.Property<string>("MiddleName_Normalized");

                    b.Property<string>("NHIF_Number");

                    b.Property<string>("National_ID");

                    b.Property<string>("PatientAlternatePhoneNumber");

                    b.Property<string>("PatientCounty");

                    b.Property<string>("PatientID");

                    b.Property<string>("PatientPhoneNumber");

                    b.Property<int>("PatientPk");

                    b.Property<string>("PatientSource");

                    b.Property<string>("PatientSubCounty");

                    b.Property<string>("PatientVillage");

                    b.Property<bool?>("Processed");

                    b.Property<string>("QueueId");

                    b.Property<string>("Serial");

                    b.Property<int>("SiteCode");

                    b.Property<DateTime?>("StartARTDate");

                    b.Property<string>("StartARTRegimenCode");

                    b.Property<string>("StartARTRegimenDesc");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<string>("TB_Number");

                    b.Property<string>("dmFirstName");

                    b.Property<string>("dmLastName");

                    b.Property<string>("dmMiddleName");

                    b.Property<string>("dmPKValue");

                    b.Property<string>("dmPKValueDoB");

                    b.Property<string>("sxFirstName");

                    b.Property<string>("sxLastName");

                    b.Property<string>("sxMiddleName");

                    b.Property<string>("sxPKValue");

                    b.Property<string>("sxPKValueDoB");

                    b.Property<string>("sxdmPKValue");

                    b.Property<string>("sxdmPKValueDoB");

                    b.HasKey("Id");

                    b.ToTable("MasterPatientIndices");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientAdverseEventExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdverseEvent");

                    b.Property<string>("AdverseEventActionTaken");

                    b.Property<string>("AdverseEventCause");

                    b.Property<string>("AdverseEventClinicalOutcome");

                    b.Property<DateTime?>("AdverseEventEndDate");

                    b.Property<bool?>("AdverseEventIsPregnant");

                    b.Property<string>("AdverseEventRegimen");

                    b.Property<DateTime?>("AdverseEventStartDate");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<string>("Emr");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("PatientID");

                    b.Property<int>("PatientPK");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<string>("Severity");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<DateTime?>("VisitDate");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPK");

                    b.ToTable("PatientAdverseEventExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientArtExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("AgeARTStart");

                    b.Property<decimal?>("AgeEnrollment");

                    b.Property<decimal?>("AgeLastVisit");

                    b.Property<DateTime?>("DOB");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<decimal?>("Duration");

                    b.Property<string>("Emr");

                    b.Property<DateTime?>("ExitDate");

                    b.Property<string>("ExitReason");

                    b.Property<DateTime?>("ExpectedReturn");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Gender");

                    b.Property<DateTime?>("LastARTDate");

                    b.Property<string>("LastRegimen");

                    b.Property<string>("LastRegimenLine");

                    b.Property<DateTime?>("LastVisit");

                    b.Property<string>("PatientID");

                    b.Property<int>("PatientPK");

                    b.Property<string>("PatientSource");

                    b.Property<string>("PreviousARTRegimen");

                    b.Property<DateTime?>("PreviousARTStartDate");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("Provider");

                    b.Property<string>("QueueId");

                    b.Property<DateTime?>("RegistrationDate");

                    b.Property<int>("SiteCode");

                    b.Property<DateTime?>("StartARTAtThisFacility");

                    b.Property<DateTime?>("StartARTDate");

                    b.Property<string>("StartRegimen");

                    b.Property<string>("StartRegimenLine");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPK");

                    b.ToTable("PatientArtExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientBaselinesExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<string>("Emr");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("PatientID");

                    b.Property<int>("PatientPK");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<int?>("bCD4");

                    b.Property<DateTime?>("bCD4Date");

                    b.Property<int?>("bWAB");

                    b.Property<DateTime?>("bWABDate");

                    b.Property<int?>("bWHO");

                    b.Property<DateTime?>("bWHODate");

                    b.Property<int?>("eCD4");

                    b.Property<DateTime?>("eCD4Date");

                    b.Property<int?>("eWAB");

                    b.Property<DateTime?>("eWABDate");

                    b.Property<int?>("eWHO");

                    b.Property<DateTime?>("eWHODate");

                    b.Property<int?>("lastCD4");

                    b.Property<DateTime?>("lastCD4Date");

                    b.Property<int?>("lastWAB");

                    b.Property<DateTime?>("lastWABDate");

                    b.Property<int?>("lastWHO");

                    b.Property<DateTime?>("lastWHODate");

                    b.Property<int?>("m12CD4");

                    b.Property<DateTime?>("m12CD4Date");

                    b.Property<int?>("m6CD4");

                    b.Property<DateTime?>("m6CD4Date");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPK");

                    b.ToTable("PatientBaselinesExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientExtract", b =>
                {
                    b.Property<int>("SiteCode");

                    b.Property<int>("PatientPK");

                    b.Property<string>("ContactRelation");

                    b.Property<DateTime?>("DOB");

                    b.Property<DateTime?>("DateConfirmedHIVPositive");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("DatePreviousARTStart");

                    b.Property<string>("District");

                    b.Property<string>("EducationLevel");

                    b.Property<string>("Emr");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Gender");

                    b.Property<Guid>("Id");

                    b.Property<DateTime?>("LastVisit");

                    b.Property<string>("MaritalStatus");

                    b.Property<string>("PatientID");

                    b.Property<string>("PatientSource");

                    b.Property<string>("PreviousARTExposure");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<string>("Region");

                    b.Property<DateTime?>("RegistrationATPMTCT");

                    b.Property<DateTime?>("RegistrationAtCCC");

                    b.Property<DateTime?>("RegistrationAtTBClinic");

                    b.Property<DateTime?>("RegistrationDate");

                    b.Property<string>("Status");

                    b.Property<string>("StatusAtCCC");

                    b.Property<string>("StatusAtPMTCT");

                    b.Property<string>("StatusAtTBClinic");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<string>("Village");

                    b.HasKey("SiteCode", "PatientPK");

                    b.HasAlternateKey("Id");

                    b.ToTable("PatientExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientLaboratoryExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<string>("Emr");

                    b.Property<int?>("EnrollmentTest");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<DateTime?>("OrderedByDate");

                    b.Property<string>("PatientID");

                    b.Property<int>("PatientPK");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<DateTime?>("ReportedByDate");

                    b.Property<string>("SatelliteName");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<string>("TestName");

                    b.Property<string>("TestResult");

                    b.Property<int?>("VisitId");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPK");

                    b.ToTable("PatientLaboratoryExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientPharmacyExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("DispenseDate");

                    b.Property<string>("Drug");

                    b.Property<decimal?>("Duration");

                    b.Property<string>("Emr");

                    b.Property<DateTime?>("ExpectedReturn");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("PatientID");

                    b.Property<int>("PatientPK");

                    b.Property<string>("PeriodTaken");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("ProphylaxisType");

                    b.Property<string>("Provider");

                    b.Property<string>("QueueId");

                    b.Property<string>("RegimenLine");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<string>("TreatmentType");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPK");

                    b.ToTable("PatientPharmacyExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientStatusExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<string>("Emr");

                    b.Property<DateTime?>("ExitDate");

                    b.Property<string>("ExitDescription");

                    b.Property<string>("ExitReason");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("PatientID");

                    b.Property<int>("PatientPK");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPK");

                    b.ToTable("PatientStatusExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientVisitExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adherence");

                    b.Property<string>("AdherenceCategory");

                    b.Property<string>("BP");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("EDD");

                    b.Property<string>("Emr");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("FamilyPlanningMethod");

                    b.Property<decimal?>("GestationAge");

                    b.Property<decimal?>("Height");

                    b.Property<DateTime?>("LMP");

                    b.Property<DateTime?>("NextAppointmentDate");

                    b.Property<string>("OI");

                    b.Property<DateTime?>("OIDate");

                    b.Property<string>("PatientID");

                    b.Property<int>("PatientPK");

                    b.Property<string>("Pregnant");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("PwP");

                    b.Property<string>("QueueId");

                    b.Property<DateTime?>("SecondlineRegimenChangeDate");

                    b.Property<string>("SecondlineRegimenChangeReason");

                    b.Property<string>("Service");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<DateTime?>("SubstitutionFirstlineRegimenDate");

                    b.Property<string>("SubstitutionFirstlineRegimenReason");

                    b.Property<DateTime?>("SubstitutionSecondlineRegimenDate");

                    b.Property<string>("SubstitutionSecondlineRegimenReason");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitId");

                    b.Property<string>("VisitType");

                    b.Property<string>("WABStage");

                    b.Property<int?>("WHOStage");

                    b.Property<decimal?>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPK");

                    b.ToTable("PatientVisitExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.EmrMetric", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateExtracted");

                    b.Property<string>("EmrName");

                    b.Property<string>("EmrVersion");

                    b.Property<DateTime?>("LastLoginDate");

                    b.Property<DateTime?>("LastMoH731RunDate");

                    b.HasKey("Id");

                    b.ToTable("EmrMetrics");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Hts.HTSClientExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClientSelfTested");

                    b.Property<string>("ClientTestedAs");

                    b.Property<string>("CoupleDiscordant");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<string>("DisabilityType");

                    b.Property<DateTime?>("Dob");

                    b.Property<string>("Emr");

                    b.Property<int>("EncounterId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("FinalResultHTS");

                    b.Property<string>("FinalResultsGiven");

                    b.Property<string>("Gender");

                    b.Property<string>("HtsNumber");

                    b.Property<string>("KeyPop");

                    b.Property<string>("KeyPopulationType");

                    b.Property<string>("MaritalStatus");

                    b.Property<int?>("MonthsLastTested");

                    b.Property<string>("PatientConsented");

                    b.Property<string>("PatientDisabled");

                    b.Property<int>("PatientPk");

                    b.Property<string>("PopulationType");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<string>("StrategyHTS");

                    b.Property<string>("TBScreeningHTS");

                    b.Property<DateTime?>("TestKitExpiryDate1");

                    b.Property<string>("TestKitExpiryDate2");

                    b.Property<string>("TestKitLotNumber1");

                    b.Property<string>("TestKitLotNumber2");

                    b.Property<string>("TestKitName1");

                    b.Property<string>("TestKitName2");

                    b.Property<string>("TestResultsHTS1");

                    b.Property<string>("TestResultsHTS2");

                    b.Property<string>("TestType");

                    b.Property<string>("TestedBefore");

                    b.Property<DateTime?>("VisitDate");

                    b.HasKey("Id");

                    b.ToTable("HtsClientExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Hts.HTSClientLinkageExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CccNumber");

                    b.Property<DateTime>("DateEnrolled");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<string>("Emr");

                    b.Property<string>("EnrolledFacilityName");

                    b.Property<string>("FacilityName");

                    b.Property<string>("HtsNumber");

                    b.Property<int>("PatientPk");

                    b.Property<DateTime?>("PhoneTracingDate");

                    b.Property<DateTime?>("PhysicalTracingDate");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<DateTime>("ReferralDate");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<string>("TracingOutcome");

                    b.HasKey("Id");

                    b.ToTable("HtsClientLinkageExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Hts.HTSClientPartnerExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Age");

                    b.Property<string>("CccNumber");

                    b.Property<string>("CurrentlyLivingWithIndexClient");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<string>("Emr");

                    b.Property<string>("FacilityName");

                    b.Property<string>("HtsNumber");

                    b.Property<string>("IpvScreeningOutcome");

                    b.Property<string>("KnowledgeOfHivStatus");

                    b.Property<DateTime?>("LinkDateLinkedToCare");

                    b.Property<string>("Linked");

                    b.Property<int?>("PartnerPatientPk");

                    b.Property<int?>("PartnerPersonId");

                    b.Property<int>("PatientPk");

                    b.Property<string>("PnsApproach");

                    b.Property<string>("PnsConsent");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<string>("RelationshipToIndexClient");

                    b.Property<string>("ScreenedForIpv");

                    b.Property<string>("Sex");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<DateTime?>("Trace1Date");

                    b.Property<string>("Trace1Outcome");

                    b.Property<string>("Trace1Type");

                    b.Property<DateTime?>("Trace2Date");

                    b.Property<string>("Trace2Outcome");

                    b.Property<string>("Trace2Type");

                    b.Property<DateTime?>("Trace3Date");

                    b.Property<string>("Trace3Outcome");

                    b.Property<string>("Trace3Type");

                    b.HasKey("Id");

                    b.ToTable("HtsClientPartnerExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.ExtractHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ExtractId");

                    b.Property<int?>("Stats");

                    b.Property<int>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<string>("StatusInfo");

                    b.HasKey("Id");

                    b.ToTable("ExtractHistory");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.PsmartStage", b =>
                {
                    b.Property<Guid>("EId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("DateSent");

                    b.Property<DateTime>("DateStaged");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<string>("Emr");

                    b.Property<int?>("Id");

                    b.Property<string>("RequestId");

                    b.Property<string>("Shr");

                    b.Property<string>("Status")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Status_Date");

                    b.Property<string>("Uuid");

                    b.HasKey("EId");

                    b.ToTable("PsmartStage");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Cbs.TempMasterPatientIndex", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Birth_Certificate");

                    b.Property<string>("CCC_Number");

                    b.Property<bool>("CheckError");

                    b.Property<string>("ContactAddress");

                    b.Property<string>("ContactName");

                    b.Property<string>("ContactPhoneNumber");

                    b.Property<string>("ContactRelation");

                    b.Property<DateTime?>("DOB");

                    b.Property<DateTime?>("DateConfirmedHIVPositive");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<string>("FacilityName");

                    b.Property<string>("FirstName");

                    b.Property<string>("FirstName_Normalized");

                    b.Property<string>("Gender");

                    b.Property<double?>("JaroWinklerScore");

                    b.Property<string>("LastName");

                    b.Property<string>("LastName_Normalized");

                    b.Property<string>("MaritalStatus");

                    b.Property<string>("MiddleName");

                    b.Property<string>("MiddleName_Normalized");

                    b.Property<string>("NHIF_Number");

                    b.Property<string>("National_ID");

                    b.Property<string>("PatientAlternatePhoneNumber");

                    b.Property<string>("PatientCounty");

                    b.Property<string>("PatientID");

                    b.Property<string>("PatientPhoneNumber");

                    b.Property<int?>("PatientPk");

                    b.Property<string>("PatientSource");

                    b.Property<string>("PatientSubCounty");

                    b.Property<string>("PatientVillage");

                    b.Property<string>("Serial");

                    b.Property<int?>("SiteCode");

                    b.Property<DateTime?>("StartARTDate");

                    b.Property<string>("StartARTRegimenCode");

                    b.Property<string>("StartARTRegimenDesc");

                    b.Property<string>("TB_Number");

                    b.Property<string>("dmFirstName");

                    b.Property<string>("dmLastName");

                    b.Property<string>("dmMiddleName");

                    b.Property<string>("dmPKValue");

                    b.Property<string>("dmPKValueDoB");

                    b.Property<string>("sxFirstName");

                    b.Property<string>("sxLastName");

                    b.Property<string>("sxMiddleName");

                    b.Property<string>("sxPKValue");

                    b.Property<string>("sxPKValueDoB");

                    b.Property<string>("sxdmPKValue");

                    b.Property<string>("sxdmPKValueDoB");

                    b.HasKey("Id");

                    b.ToTable("TempMasterPatientIndices");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientAdverseEventExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdverseEvent");

                    b.Property<string>("AdverseEventActionTaken");

                    b.Property<string>("AdverseEventCause");

                    b.Property<string>("AdverseEventClinicalOutcome");

                    b.Property<DateTime?>("AdverseEventEndDate");

                    b.Property<bool?>("AdverseEventIsPregnant");

                    b.Property<string>("AdverseEventRegimen");

                    b.Property<DateTime?>("AdverseEventStartDate");

                    b.Property<bool>("CheckError");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("Project");

                    b.Property<string>("Severity");

                    b.Property<int?>("SiteCode");

                    b.Property<DateTime?>("VisitDate");

                    b.HasKey("Id");

                    b.ToTable("TempPatientAdverseEventExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientAdverseEventExtractError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdverseEvent");

                    b.Property<DateTime>("AdverseEventEndDate");

                    b.Property<DateTime>("AdverseEventStartDate");

                    b.Property<bool>("CheckError");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("Project");

                    b.Property<string>("Severity");

                    b.Property<int?>("SiteCode");

                    b.Property<DateTime>("VisitDate");

                    b.HasKey("Id");

                    b.ToTable("vTempPatientAdverseEventExtractError");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientAdverseEventExtractErrorSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdverseEvent");

                    b.Property<DateTime>("AdverseEventEndDate");

                    b.Property<DateTime>("AdverseEventStartDate");

                    b.Property<DateTime?>("DateGenerated");

                    b.Property<string>("Extract");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Field");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<Guid>("RecordId");

                    b.Property<string>("Severity");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("Summary");

                    b.Property<string>("Type");

                    b.Property<DateTime>("VisitDate");

                    b.HasKey("Id");

                    b.ToTable("vTempPatientAdverseEventExtractErrorSummary");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientArtExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("AgeARTStart");

                    b.Property<decimal?>("AgeEnrollment");

                    b.Property<decimal?>("AgeLastVisit");

                    b.Property<bool>("CheckError");

                    b.Property<DateTime?>("DOB");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<decimal?>("Duration");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<DateTime?>("ExitDate");

                    b.Property<string>("ExitReason");

                    b.Property<DateTime?>("ExpectedReturn");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Gender");

                    b.Property<DateTime?>("LastARTDate");

                    b.Property<string>("LastRegimen");

                    b.Property<string>("LastRegimenLine");

                    b.Property<DateTime?>("LastVisit");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("PatientSource");

                    b.Property<string>("PreviousARTRegimen");

                    b.Property<DateTime?>("PreviousARTStartDate");

                    b.Property<string>("Project");

                    b.Property<string>("Provider");

                    b.Property<DateTime?>("RegistrationDate");

                    b.Property<int?>("SiteCode");

                    b.Property<DateTime?>("StartARTAtThisFacility");

                    b.Property<DateTime?>("StartARTDate");

                    b.Property<string>("StartRegimen");

                    b.Property<string>("StartRegimenLine");

                    b.HasKey("Id");

                    b.ToTable("TempPatientArtExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientArtExtractError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("AgeARTStart");

                    b.Property<decimal?>("AgeEnrollment");

                    b.Property<decimal?>("AgeLastVisit");

                    b.Property<bool>("CheckError");

                    b.Property<DateTime?>("DOB");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<decimal?>("Duration");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<DateTime?>("ExitDate");

                    b.Property<string>("ExitReason");

                    b.Property<DateTime?>("ExpectedReturn");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Gender");

                    b.Property<DateTime?>("LastARTDate");

                    b.Property<string>("LastRegimen");

                    b.Property<string>("LastRegimenLine");

                    b.Property<DateTime?>("LastVisit");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("PatientSource");

                    b.Property<string>("PreviousARTRegimen");

                    b.Property<DateTime?>("PreviousARTStartDate");

                    b.Property<string>("Project");

                    b.Property<string>("Provider");

                    b.Property<DateTime?>("RegistrationDate");

                    b.Property<int?>("SiteCode");

                    b.Property<DateTime?>("StartARTAtThisFacility");

                    b.Property<DateTime?>("StartARTDate");

                    b.Property<string>("StartRegimen");

                    b.Property<string>("StartRegimenLine");

                    b.HasKey("Id");

                    b.ToTable("vTempPatientArtExtractError");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientArtExtractErrorSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("AgeLastVisit");

                    b.Property<DateTime?>("DOB");

                    b.Property<DateTime?>("DateGenerated");

                    b.Property<DateTime?>("ExitDate");

                    b.Property<string>("ExitReason");

                    b.Property<string>("Extract");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Field");

                    b.Property<string>("Gender");

                    b.Property<DateTime?>("LastARTDate");

                    b.Property<string>("LastRegimen");

                    b.Property<string>("LastRegimenLine");

                    b.Property<DateTime?>("LastVisit");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("PatientSource");

                    b.Property<string>("PreviousARTRegimen");

                    b.Property<DateTime?>("PreviousARTStartDate");

                    b.Property<Guid>("RecordId");

                    b.Property<DateTime?>("RegistrationDate");

                    b.Property<int?>("SiteCode");

                    b.Property<DateTime?>("StartARTAtThisFacility");

                    b.Property<DateTime?>("StartARTDate");

                    b.Property<string>("StartRegimen");

                    b.Property<string>("StartRegimenLine");

                    b.Property<string>("Summary");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("vTempPatientArtExtractErrorSummary");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientBaselinesExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("Project");

                    b.Property<int?>("SiteCode");

                    b.Property<int?>("bCD4");

                    b.Property<DateTime?>("bCD4Date");

                    b.Property<int?>("bWAB");

                    b.Property<DateTime?>("bWABDate");

                    b.Property<int?>("bWHO");

                    b.Property<DateTime?>("bWHODate");

                    b.Property<int?>("eCD4");

                    b.Property<DateTime?>("eCD4Date");

                    b.Property<int?>("eWAB");

                    b.Property<DateTime?>("eWABDate");

                    b.Property<int?>("eWHO");

                    b.Property<DateTime?>("eWHODate");

                    b.Property<int?>("lastCD4");

                    b.Property<DateTime?>("lastCD4Date");

                    b.Property<int?>("lastWAB");

                    b.Property<DateTime?>("lastWABDate");

                    b.Property<int?>("lastWHO");

                    b.Property<DateTime?>("lastWHODate");

                    b.Property<int?>("m12CD4");

                    b.Property<DateTime?>("m12CD4Date");

                    b.Property<int?>("m6CD4");

                    b.Property<DateTime?>("m6CD4Date");

                    b.HasKey("Id");

                    b.ToTable("TempPatientBaselinesExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientBaselinesExtractError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("Project");

                    b.Property<int?>("SiteCode");

                    b.Property<int?>("bCD4");

                    b.Property<DateTime?>("bCD4Date");

                    b.Property<int?>("bWAB");

                    b.Property<DateTime?>("bWABDate");

                    b.Property<int?>("bWHO");

                    b.Property<DateTime?>("bWHODate");

                    b.Property<int?>("eCD4");

                    b.Property<DateTime?>("eCD4Date");

                    b.Property<int?>("eWAB");

                    b.Property<DateTime?>("eWABDate");

                    b.Property<int?>("eWHO");

                    b.Property<DateTime?>("eWHODate");

                    b.Property<int?>("lastCD4");

                    b.Property<DateTime?>("lastCD4Date");

                    b.Property<int?>("lastWAB");

                    b.Property<DateTime?>("lastWABDate");

                    b.Property<int?>("lastWHO");

                    b.Property<DateTime?>("lastWHODate");

                    b.Property<int?>("m12CD4");

                    b.Property<DateTime?>("m12CD4Date");

                    b.Property<int?>("m6CD4");

                    b.Property<DateTime?>("m6CD4Date");

                    b.HasKey("Id");

                    b.ToTable("vTempPatientBaselinesExtractError");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientBaselinesExtractErrorSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateGenerated");

                    b.Property<string>("Extract");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("Field");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<Guid>("RecordId");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("Summary");

                    b.Property<string>("Type");

                    b.Property<int?>("bCD4");

                    b.Property<DateTime?>("bCD4Date");

                    b.Property<int?>("bWAB");

                    b.Property<DateTime?>("bWABDate");

                    b.Property<int?>("bWHO");

                    b.Property<DateTime?>("bWHODate");

                    b.Property<int?>("eCD4");

                    b.Property<DateTime?>("eCD4Date");

                    b.Property<int?>("eWAB");

                    b.Property<DateTime?>("eWABDate");

                    b.Property<int?>("eWHO");

                    b.Property<DateTime?>("eWHODate");

                    b.Property<int?>("lastCD4");

                    b.Property<DateTime?>("lastCD4Date");

                    b.Property<int?>("lastWAB");

                    b.Property<DateTime?>("lastWABDate");

                    b.Property<int?>("lastWHO");

                    b.Property<DateTime?>("lastWHODate");

                    b.Property<int?>("m12CD4");

                    b.Property<DateTime?>("m12CD4Date");

                    b.Property<int?>("m6CD4");

                    b.Property<DateTime?>("m6CD4Date");

                    b.HasKey("Id");

                    b.ToTable("vTempPatientBaselinesExtractErrorSummary");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<string>("ContactRelation");

                    b.Property<DateTime?>("DOB");

                    b.Property<DateTime?>("DateConfirmedHIVPositive");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<string>("District");

                    b.Property<string>("EducationLevel");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Gender");

                    b.Property<DateTime?>("LastVisit");

                    b.Property<string>("MaritalStatus");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("PatientSource");

                    b.Property<string>("PreviousARTExposure");

                    b.Property<DateTime?>("PreviousARTStartDate");

                    b.Property<string>("Project");

                    b.Property<string>("Region");

                    b.Property<DateTime?>("RegistrationAtCCC");

                    b.Property<DateTime?>("RegistrationAtPMTCT");

                    b.Property<DateTime?>("RegistrationAtTBClinic");

                    b.Property<DateTime?>("RegistrationDate");

                    b.Property<string>("SatelliteName");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("StatusAtCCC");

                    b.Property<string>("StatusAtPMTCT");

                    b.Property<string>("StatusAtTBClinic");

                    b.Property<string>("Village");

                    b.HasKey("Id");

                    b.ToTable("TempPatientExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientExtractError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<string>("ContactRelation");

                    b.Property<DateTime?>("DOB");

                    b.Property<DateTime?>("DateConfirmedHIVPositive");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<string>("District");

                    b.Property<string>("EducationLevel");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Gender");

                    b.Property<DateTime?>("LastVisit");

                    b.Property<string>("MaritalStatus");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("PatientSource");

                    b.Property<string>("PreviousARTExposure");

                    b.Property<DateTime?>("PreviousARTStartDate");

                    b.Property<string>("Project");

                    b.Property<string>("Region");

                    b.Property<DateTime?>("RegistrationATPMTCT");

                    b.Property<DateTime?>("RegistrationAtCCC");

                    b.Property<DateTime?>("RegistrationAtTBClinic");

                    b.Property<DateTime?>("RegistrationDate");

                    b.Property<string>("SatelliteName");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("StatusAtCCC");

                    b.Property<string>("StatusAtPMTCT");

                    b.Property<string>("StatusAtTBClinic");

                    b.Property<string>("Village");

                    b.HasKey("Id");

                    b.ToTable("vTempPatientExtractError");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientExtractErrorSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateGenerated");

                    b.Property<string>("Extract");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Field");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<Guid>("RecordId");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("Summary");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("vTempPatientExtractErrorSummary");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientLaboratoryExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<string>("Emr");

                    b.Property<int?>("EnrollmentTest");

                    b.Property<int>("ErrorType");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<DateTime?>("OrderedByDate");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("Project");

                    b.Property<DateTime?>("ReportedByDate");

                    b.Property<string>("SatelliteName");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("TestName");

                    b.Property<string>("TestResult");

                    b.Property<int?>("VisitId");

                    b.HasKey("Id");

                    b.ToTable("TempPatientLaboratoryExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientLaboratoryExtractError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<string>("Emr");

                    b.Property<int?>("EnrollmentTest");

                    b.Property<int>("ErrorType");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<DateTime?>("OrderedByDate");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("Project");

                    b.Property<DateTime?>("ReportedByDate");

                    b.Property<string>("SatelliteName");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("TestName");

                    b.Property<string>("TestResult");

                    b.Property<int?>("VisitId");

                    b.HasKey("Id");

                    b.ToTable("vTempPatientLaboratoryExtractError");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientLaboratoryExtractErrorSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateGenerated");

                    b.Property<int?>("EnrollmentTest");

                    b.Property<string>("Extract");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Field");

                    b.Property<DateTime?>("OrderedByDate");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<Guid>("RecordId");

                    b.Property<DateTime?>("ReportedByDate");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("Summary");

                    b.Property<string>("TestName");

                    b.Property<string>("TestResult");

                    b.Property<string>("Type");

                    b.Property<int?>("VisitId");

                    b.HasKey("Id");

                    b.ToTable("vTempPatientLaboratoryExtractErrorSummary");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientPharmacyExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("DispenseDate");

                    b.Property<string>("Drug");

                    b.Property<decimal?>("Duration");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<DateTime?>("ExpectedReturn");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("PeriodTaken");

                    b.Property<string>("Project");

                    b.Property<string>("ProphylaxisType");

                    b.Property<string>("Provider");

                    b.Property<string>("RegimenLine");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("TreatmentType");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.ToTable("TempPatientPharmacyExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientPharmacyExtractError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("DispenseDate");

                    b.Property<string>("Drug");

                    b.Property<decimal?>("Duration");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<DateTime?>("ExpectedReturn");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("PeriodTaken");

                    b.Property<string>("Project");

                    b.Property<string>("ProphylaxisType");

                    b.Property<string>("Provider");

                    b.Property<string>("RegimenLine");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("TreatmentType");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.ToTable("vTempPatientPharmacyExtractError");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientPharmacyExtractErrorSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateGenerated");

                    b.Property<DateTime?>("DispenseDate");

                    b.Property<string>("Drug");

                    b.Property<decimal?>("Duration");

                    b.Property<DateTime?>("ExpectedReturn");

                    b.Property<string>("Extract");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("Field");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("PeriodTaken");

                    b.Property<string>("ProphylaxisType");

                    b.Property<string>("Provider");

                    b.Property<Guid>("RecordId");

                    b.Property<string>("RegimenLine");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("Summary");

                    b.Property<string>("TreatmentType");

                    b.Property<string>("Type");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.ToTable("vTempPatientPharmacyExtractErrorSummary");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientStatusExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<DateTime?>("ExitDate");

                    b.Property<string>("ExitDescription");

                    b.Property<string>("ExitReason");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("Project");

                    b.Property<int?>("SiteCode");

                    b.HasKey("Id");

                    b.ToTable("TempPatientStatusExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientStatusExtractError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<DateTime?>("ExitDate");

                    b.Property<string>("ExitDescription");

                    b.Property<string>("ExitReason");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("Project");

                    b.Property<int?>("SiteCode");

                    b.HasKey("Id");

                    b.ToTable("vTempPatientStatusExtractError");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientStatusExtractErrorSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateGenerated");

                    b.Property<DateTime?>("ExitDate");

                    b.Property<string>("ExitDescription");

                    b.Property<string>("ExitReason");

                    b.Property<string>("Extract");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Field");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<Guid>("RecordId");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("Summary");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("vTempPatientStatusExtractErrorSummary");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientVisitExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adherence");

                    b.Property<string>("AdherenceCategory");

                    b.Property<string>("BP");

                    b.Property<bool>("CheckError");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("EDD");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("FamilyPlanningMethod");

                    b.Property<decimal?>("GestationAge");

                    b.Property<decimal?>("Height");

                    b.Property<DateTime?>("LMP");

                    b.Property<DateTime?>("NextAppointmentDate");

                    b.Property<string>("OI");

                    b.Property<DateTime?>("OIDate");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("Pregnant");

                    b.Property<string>("Project");

                    b.Property<string>("PwP");

                    b.Property<DateTime?>("SecondlineRegimenChangeDate");

                    b.Property<string>("SecondlineRegimenChangeReason");

                    b.Property<string>("Service");

                    b.Property<int?>("SiteCode");

                    b.Property<DateTime?>("SubstitutionFirstlineRegimenDate");

                    b.Property<string>("SubstitutionFirstlineRegimenReason");

                    b.Property<DateTime?>("SubstitutionSecondlineRegimenDate");

                    b.Property<string>("SubstitutionSecondlineRegimenReason");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitId");

                    b.Property<string>("VisitType");

                    b.Property<string>("WABStage");

                    b.Property<int?>("WHOStage");

                    b.Property<decimal?>("Weight");

                    b.HasKey("Id");

                    b.ToTable("TempPatientVisitExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientVisitExtractError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adherence");

                    b.Property<string>("AdherenceCategory");

                    b.Property<string>("BP");

                    b.Property<bool>("CheckError");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("EDD");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("FamilyPlanningMethod");

                    b.Property<decimal?>("GestationAge");

                    b.Property<decimal?>("Height");

                    b.Property<DateTime?>("LMP");

                    b.Property<DateTime?>("NextAppointmentDate");

                    b.Property<string>("OI");

                    b.Property<DateTime?>("OIDate");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("Pregnant");

                    b.Property<string>("Project");

                    b.Property<string>("PwP");

                    b.Property<DateTime?>("SecondlineRegimenChangeDate");

                    b.Property<string>("SecondlineRegimenChangeReason");

                    b.Property<string>("Service");

                    b.Property<int?>("SiteCode");

                    b.Property<DateTime?>("SubstitutionFirstlineRegimenDate");

                    b.Property<string>("SubstitutionFirstlineRegimenReason");

                    b.Property<DateTime?>("SubstitutionSecondlineRegimenDate");

                    b.Property<string>("SubstitutionSecondlineRegimenReason");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitId");

                    b.Property<string>("VisitType");

                    b.Property<string>("WABStage");

                    b.Property<int?>("WHOStage");

                    b.Property<decimal?>("Weight");

                    b.HasKey("Id");

                    b.ToTable("vTempPatientVisitExtractError");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientVisitExtractErrorSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adherence");

                    b.Property<string>("AdherenceCategory");

                    b.Property<string>("BP");

                    b.Property<DateTime?>("DateGenerated");

                    b.Property<DateTime?>("EDD");

                    b.Property<string>("Extract");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("FamilyPlanningMethod");

                    b.Property<string>("Field");

                    b.Property<decimal?>("GestationAge");

                    b.Property<decimal?>("Height");

                    b.Property<DateTime?>("LMP");

                    b.Property<DateTime?>("NextAppointmentDate");

                    b.Property<string>("OI");

                    b.Property<DateTime?>("OIDate");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("Pregnant");

                    b.Property<string>("PwP");

                    b.Property<Guid>("RecordId");

                    b.Property<DateTime?>("SecondlineRegimenChangeDate");

                    b.Property<string>("SecondlineRegimenChangeReason");

                    b.Property<string>("Service");

                    b.Property<int?>("SiteCode");

                    b.Property<DateTime?>("SubstitutionFirstlineRegimenDate");

                    b.Property<string>("SubstitutionFirstlineRegimenReason");

                    b.Property<DateTime?>("SubstitutionSecondlineRegimenDate");

                    b.Property<string>("SubstitutionSecondlineRegimenReason");

                    b.Property<string>("Summary");

                    b.Property<string>("Type");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitId");

                    b.Property<string>("VisitType");

                    b.Property<string>("WABStage");

                    b.Property<int?>("WHOStage");

                    b.Property<decimal?>("Weight");

                    b.HasKey("Id");

                    b.ToTable("vTempPatientVisitExtractErrorSummary");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Hts.TempHTSClientExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<string>("ClientSelfTested");

                    b.Property<string>("ClientTestedAs");

                    b.Property<string>("CoupleDiscordant");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<string>("DisabilityType");

                    b.Property<DateTime?>("Dob");

                    b.Property<string>("Emr");

                    b.Property<int?>("EncounterId");

                    b.Property<int>("ErrorType");

                    b.Property<string>("FacilityName");

                    b.Property<string>("FinalResultHTS");

                    b.Property<string>("FinalResultsGiven");

                    b.Property<string>("Gender");

                    b.Property<string>("HtsNumber");

                    b.Property<string>("KeyPop");

                    b.Property<string>("KeyPopulationType");

                    b.Property<string>("MaritalStatus");

                    b.Property<int?>("MonthsLastTested");

                    b.Property<string>("PatientConsented");

                    b.Property<string>("PatientDisabled");

                    b.Property<int?>("PatientPk");

                    b.Property<string>("PopulationType");

                    b.Property<string>("Project");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("StrategyHTS");

                    b.Property<string>("TBScreeningHTS");

                    b.Property<DateTime?>("TestKitExpiryDate1");

                    b.Property<string>("TestKitExpiryDate2");

                    b.Property<string>("TestKitLotNumber1");

                    b.Property<string>("TestKitLotNumber2");

                    b.Property<string>("TestKitName1");

                    b.Property<string>("TestKitName2");

                    b.Property<string>("TestResultsHTS1");

                    b.Property<string>("TestResultsHTS2");

                    b.Property<string>("TestType");

                    b.Property<string>("TestedBefore");

                    b.Property<DateTime?>("VisitDate");

                    b.HasKey("Id");

                    b.ToTable("TempHtsClientExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Hts.TempHTSClientExtractError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<string>("ClientSelfTested");

                    b.Property<string>("ClientTestedAs");

                    b.Property<string>("CoupleDiscordant");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<string>("DisabilityType");

                    b.Property<DateTime?>("Dob");

                    b.Property<string>("Emr");

                    b.Property<int?>("EncounterId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("FinalResultHTS");

                    b.Property<string>("FinalResultsGiven");

                    b.Property<string>("Gender");

                    b.Property<string>("HtsNumber");

                    b.Property<string>("KeyPop");

                    b.Property<string>("KeyPopulationType");

                    b.Property<string>("MaritalStatus");

                    b.Property<int?>("MonthsLastTested");

                    b.Property<string>("PatientConsented");

                    b.Property<string>("PatientDisabled");

                    b.Property<int?>("PatientPk");

                    b.Property<string>("PopulationType");

                    b.Property<string>("Project");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("StrategyHTS");

                    b.Property<string>("TBScreeningHTS");

                    b.Property<DateTime?>("TestKitExpiryDate1");

                    b.Property<string>("TestKitExpiryDate2");

                    b.Property<string>("TestKitLotNumber1");

                    b.Property<string>("TestKitLotNumber2");

                    b.Property<string>("TestKitName1");

                    b.Property<string>("TestKitName2");

                    b.Property<string>("TestResultsHTS1");

                    b.Property<string>("TestResultsHTS2");

                    b.Property<string>("TestType");

                    b.Property<string>("TestedBefore");

                    b.Property<DateTime?>("VisitDate");

                    b.HasKey("Id");

                    b.ToTable("vTempHTSClientExtractError");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Hts.TempHTSClientExtractErrorSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClientSelfTested");

                    b.Property<string>("ClientTestedAs");

                    b.Property<string>("CoupleDiscordant");

                    b.Property<DateTime?>("DateGenerated");

                    b.Property<DateTime?>("Dob");

                    b.Property<int?>("EncounterId");

                    b.Property<string>("Extract");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Field");

                    b.Property<string>("FinalResultHTS");

                    b.Property<string>("FinalResultsGiven");

                    b.Property<string>("Gender");

                    b.Property<string>("HtsNumber");

                    b.Property<string>("KeyPop");

                    b.Property<string>("MaritalStatus");

                    b.Property<int?>("MonthsLastTested");

                    b.Property<int?>("PatientPK");

                    b.Property<Guid>("RecordId");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("StrategyHTS");

                    b.Property<string>("Summary");

                    b.Property<string>("TBScreeningHTS");

                    b.Property<DateTime?>("TestKitExpiryDate1");

                    b.Property<string>("TestKitExpiryDate2");

                    b.Property<string>("TestKitLotNumber1");

                    b.Property<string>("TestKitLotNumber2");

                    b.Property<string>("TestKitName1");

                    b.Property<string>("TestKitName2");

                    b.Property<string>("TestResultsHTS1");

                    b.Property<string>("TestResultsHTS2");

                    b.Property<string>("TestType");

                    b.Property<string>("TestedBefore");

                    b.Property<string>("Type");

                    b.Property<DateTime?>("VisitDate");

                    b.HasKey("Id");

                    b.ToTable("vTempHTSClientExtractErrorSummary");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Hts.TempHTSClientLinkageExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CccNumber");

                    b.Property<bool>("CheckError");

                    b.Property<DateTime?>("DateEnrolled");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<string>("Emr");

                    b.Property<string>("EnrolledFacilityName");

                    b.Property<int>("ErrorType");

                    b.Property<string>("FacilityName");

                    b.Property<string>("HtsNumber");

                    b.Property<int?>("PatientPk");

                    b.Property<DateTime?>("PhoneTracingDate");

                    b.Property<DateTime?>("PhysicalTracingDate");

                    b.Property<string>("Project");

                    b.Property<DateTime?>("ReferralDate");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("TracingOutcome");

                    b.HasKey("Id");

                    b.ToTable("TempHtsClientLinkageExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Hts.TempHTSClientLinkageExtractError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CccNumber");

                    b.Property<bool>("CheckError");

                    b.Property<DateTime?>("DateEnrolled");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<string>("Emr");

                    b.Property<string>("EnrolledFacilityName");

                    b.Property<string>("FacilityName");

                    b.Property<string>("HtsNumber");

                    b.Property<int?>("PatientPk");

                    b.Property<DateTime?>("PhoneTracingDate");

                    b.Property<DateTime?>("PhysicalTracingDate");

                    b.Property<string>("Project");

                    b.Property<DateTime?>("ReferralDate");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("TracingOutcome");

                    b.HasKey("Id");

                    b.ToTable("vTempHTSClientLinkageExtractError");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Hts.TempHTSClientLinkageExtractErrorSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CccNumber");

                    b.Property<DateTime?>("DateEnrolled");

                    b.Property<DateTime?>("DateGenerated");

                    b.Property<string>("EnrolledFacilityName");

                    b.Property<string>("Extract");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Field");

                    b.Property<string>("HtsNumber");

                    b.Property<int?>("PatientPK");

                    b.Property<DateTime?>("PhoneTracingDate");

                    b.Property<DateTime?>("PhysicalTracingDate");

                    b.Property<Guid>("RecordId");

                    b.Property<DateTime?>("ReferralDate");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("Summary");

                    b.Property<string>("TracingOutcome");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("vTempHTSClientLinkageExtractErrorSummary");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Hts.TempHTSClientPartnerExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Age");

                    b.Property<string>("CccNumber");

                    b.Property<bool>("CheckError");

                    b.Property<string>("CurrentlyLivingWithIndexClient");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<string>("FacilityName");

                    b.Property<string>("HtsNumber");

                    b.Property<string>("IpvScreeningOutcome");

                    b.Property<string>("KnowledgeOfHivStatus");

                    b.Property<DateTime?>("LinkDateLinkedToCare");

                    b.Property<string>("Linked");

                    b.Property<int?>("PartnerPatientPk");

                    b.Property<int?>("PartnerPersonId");

                    b.Property<int?>("PatientPk");

                    b.Property<string>("PnsApproach");

                    b.Property<string>("PnsConsent");

                    b.Property<string>("Project");

                    b.Property<string>("RelationshipToIndexClient");

                    b.Property<string>("ScreenedForIpv");

                    b.Property<string>("Sex");

                    b.Property<int?>("SiteCode");

                    b.Property<DateTime?>("Trace1Date");

                    b.Property<string>("Trace1Outcome");

                    b.Property<string>("Trace1Type");

                    b.Property<DateTime?>("Trace2Date");

                    b.Property<string>("Trace2Outcome");

                    b.Property<string>("Trace2Type");

                    b.Property<DateTime?>("Trace3Date");

                    b.Property<string>("Trace3Outcome");

                    b.Property<string>("Trace3Type");

                    b.HasKey("Id");

                    b.ToTable("TempHtsClientPartnerExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Hts.TempHTSClientPartnerExtractError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Age");

                    b.Property<string>("CccNumber");

                    b.Property<bool>("CheckError");

                    b.Property<string>("CurrentlyLivingWithIndexClient");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<string>("Emr");

                    b.Property<string>("FacilityName");

                    b.Property<string>("HtsNumber");

                    b.Property<string>("IpvScreeningOutcome");

                    b.Property<string>("KnowledgeOfHivStatus");

                    b.Property<DateTime?>("LinkDateLinkedToCare");

                    b.Property<string>("Linked");

                    b.Property<int?>("PartnerPatientPk");

                    b.Property<int?>("PartnerPersonId");

                    b.Property<int?>("PatientPk");

                    b.Property<string>("PnsApproach");

                    b.Property<string>("PnsConsent");

                    b.Property<string>("Project");

                    b.Property<string>("RelationshipToIndexClient");

                    b.Property<string>("ScreenedForIpv");

                    b.Property<string>("Sex");

                    b.Property<int?>("SiteCode");

                    b.Property<DateTime?>("Trace1Date");

                    b.Property<string>("Trace1Outcome");

                    b.Property<string>("Trace1Type");

                    b.Property<DateTime?>("Trace2Date");

                    b.Property<string>("Trace2Outcome");

                    b.Property<string>("Trace2Type");

                    b.Property<DateTime?>("Trace3Date");

                    b.Property<string>("Trace3Outcome");

                    b.Property<string>("Trace3Type");

                    b.HasKey("Id");

                    b.ToTable("vTempHTSClientPartnerExtractError");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Hts.TempHTSClientPartnerExtractErrorSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Age");

                    b.Property<string>("CccNumber");

                    b.Property<string>("CurrentlyLivingWithIndexClient");

                    b.Property<DateTime?>("DateGenerated");

                    b.Property<string>("Extract");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Field");

                    b.Property<string>("HtsNumber");

                    b.Property<string>("IpvScreeningOutcome");

                    b.Property<string>("KnowledgeOfHivStatus");

                    b.Property<DateTime?>("LinkDateLinkedToCare");

                    b.Property<string>("Linked");

                    b.Property<int?>("PartnerPatientPk");

                    b.Property<int?>("PartnerPersonId");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("PnsApproach");

                    b.Property<string>("PnsConsent");

                    b.Property<Guid>("RecordId");

                    b.Property<string>("RelationshipToIndexClient");

                    b.Property<string>("ScreenedForIpv");

                    b.Property<string>("Sex");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("Summary");

                    b.Property<DateTime?>("Trace1Date");

                    b.Property<string>("Trace1Outcome");

                    b.Property<string>("Trace1Type");

                    b.Property<DateTime?>("Trace2Date");

                    b.Property<string>("Trace2Outcome");

                    b.Property<string>("Trace2Type");

                    b.Property<DateTime?>("Trace3Date");

                    b.Property<string>("Trace3Outcome");

                    b.Property<string>("Trace3Type");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("vTempHTSClientPartnerExtractErrorSummary");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.ValidationError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateGenerated");

                    b.Property<Guid>("RecordId");

                    b.Property<Guid>("ValidatorId");

                    b.HasKey("Id");

                    b.HasIndex("ValidatorId");

                    b.ToTable("ValidationError");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Validator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Extract");

                    b.Property<string>("Field");

                    b.Property<string>("Logic");

                    b.Property<string>("Summary");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("Validator");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientAdverseEventExtract", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientExtract")
                        .WithMany("PatientAdverseEventExtracts")
                        .HasForeignKey("SiteCode", "PatientPK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientArtExtract", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientExtract")
                        .WithMany("PatientArtExtracts")
                        .HasForeignKey("SiteCode", "PatientPK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientBaselinesExtract", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientExtract")
                        .WithMany("PatientBaselinesExtracts")
                        .HasForeignKey("SiteCode", "PatientPK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientLaboratoryExtract", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientExtract")
                        .WithMany("PatientLaboratoryExtracts")
                        .HasForeignKey("SiteCode", "PatientPK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientPharmacyExtract", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientExtract")
                        .WithMany("PatientPharmacyExtracts")
                        .HasForeignKey("SiteCode", "PatientPK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientStatusExtract", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientExtract")
                        .WithMany("PatientStatusExtracts")
                        .HasForeignKey("SiteCode", "PatientPK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientVisitExtract", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientExtract")
                        .WithMany("PatientVisitExtracts")
                        .HasForeignKey("SiteCode", "PatientPK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.ValidationError", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Validator")
                        .WithMany("ValidationErrors")
                        .HasForeignKey("ValidatorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
